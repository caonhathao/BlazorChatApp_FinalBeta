@inject ChatRepo chatRepo
@inject MyHubConnectionService HubConnectionService
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider

@using BlazorRealTimeSignalR.Client.ChatServices
@using BlazorRealTimeSignalR.Repos
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client

@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContentAccessor

@*     <div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
    <a class="navbar-brand" href="">BlazorRealTimeSignalR</a>
    </div>
    </div> *@

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="container-navbar">
                <div class="info-group">
                    <div class="title">
                        <a href="home" style="color:white;">
                            BlazorChatApp <br />SignalR
                        </a>
                    </div>
                    <a class="account" href="#">
                        <img class="info-control thumbnail" src="sources/avatar.jpg" />
                        <div class="info-control account-name">@FullName</div>
                    </a>
                </div>

                <div class="navigation">
                    <div class="item">
                        <NavLink class="item-link" href="/home" Match="NavLinkMatch.All">
                            <span>
                                <img class="icon" src="icon/list.svg" />
                                Danh bạ
                            </span>
                        </NavLink>
                    </div>
                    <div class="item">
                        <NavLink class="item-link" href="/group-chat" Match="NavLinkMatch.All">
                            <span>
                                <img class="icon" src="/icon/collection.svg" />
                                Nhóm
                            </span>
                        </NavLink>
                    </div>
                    <div class="item">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <button class="item-btn" @onclick="LogoutClicked">
                                <span>
                                    <img class="icon" src="/icon/box-arrow-left.svg" />
                                    Đăng xuất
                                </span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>

        </Authorized>

        <NotAuthorized>
            <div class="container-navbar">
                <div class="info-group">
                    <div class="title">
                        <a href="home" style="color:white;">
                            BlazorChatApp <br />SignalR
                        </a>
                    </div>
                    <div class="navigation">
                        <div class="item">
                            <NavLink class="item-link" href="/Account/Login" Match="NavLinkMatch.All">
                                <span>
                                    <img class="icon" src="/icon/door-open.svg" /> Đăng nhập
                                </span>
                            </NavLink>
                        </div>

                        <div class="item">
                            <NavLink class="item-link" href="/Account/Register" Match="NavLinkMatch.All">
                                <span>
                                    <img class="icon" src="/icon/person-plus.svg" />
                                    Đăng kí
                                </span>
                            </NavLink>
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>

</CascadingAuthenticationState>




@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private HubConnection hubConnection;
    string FullName = "Undefined";

    protected override void OnInitialized()
    {
        FullName = HttpContentAccessor.HttpContext.User.Identity.Name;
        hubConnection = HubConnectionService.GetHubConnection();
    }



    async Task LogoutClicked()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;
        if (user != null)
        {
            var id = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;
            Console.WriteLine($"LogoutClicked: User ID = {id}");

            await chatRepo.RemoveUserAsync(id);
            await hubConnection.SendAsync("RemoveUserAsync", id);
            // navManager.NavigateTo("/", true);
        }
    }

}